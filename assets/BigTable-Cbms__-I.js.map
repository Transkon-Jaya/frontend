{"version":3,"file":"BigTable-Cbms__-I.js","sources":["../../src/components/BigTable.vue"],"sourcesContent":["<script setup>\r\nimport { ref, watch, computed, onMounted, onBeforeUnmount } from \"vue\";\r\nimport axios from \"axios\";\r\nimport { VueGoodTable } from \"vue-good-table-next\";\r\nimport \"vue-good-table-next/dist/vue-good-table-next.css\";\r\nimport Multiselect from \"vue-multiselect\";\r\nimport \"vue-multiselect/dist/vue-multiselect.css\";\r\nimport * as XLSX from \"xlsx\";\r\nimport VButton from '@/components/Button.vue'\r\n\r\nimport { useUserStore} from \"@/stores/user.js\";\r\nimport { log } from \"@/utils/logger\";\r\nconst userData = useUserStore();\r\n\r\nconst props = defineProps({\r\n  settings: {\r\n    type: Object,\r\n    required: true,\r\n  },\r\n  urls: {\r\n    type: Object,\r\n    required: true,\r\n  },\r\n  fields: {\r\n    type: Object,\r\n    required: true,\r\n  },\r\n  canInsert: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  canUpdate: {\r\n    type: Boolean,\r\n    default: true\r\n  }\r\n});\r\n\r\nconst settings = ref();\r\nconst urls = ref();\r\nconst fields = ref();\r\nconst canInsert = ref();\r\nconst canUpdate = ref();\r\n\r\nsettings.value = props.settings;\r\nurls.value = props.urls;\r\nfields.value = props.fields;\r\ncanInsert.value = props.canInsert;\r\ncanUpdate.value = props.canUpdate;\r\n\r\nconst size = settings.value.size ?? [10,20,100];\r\n\r\nif (Array.isArray(fields.value.toRemove)) {\r\n  fields.value.toRemove.push(\"isEditing\", \"filterable\", \"vgt_id\", \"originalIndex\");\r\n} else {\r\n  fields.value.toRemove = [\"isEditing\", \"filterable\", \"vgt_id\", \"originalIndex\"];\r\n}\r\n\r\nconst datas = ref({data : [], dropdowns : []});\r\n\r\nconst columns = ref([]);\r\nlet insertColumns = ref([]);\r\n\r\nconst DataInsert = ref([]);\r\nconst filteredData = ref([]); // Store filtered data\r\nconst loading = ref(true);\r\nconst error = ref(null);\r\nconst firstColumnWidth = ref(\"150px\");\r\nconst secondColumnWidth = ref(\"100px\");\r\nconst changedRows = ref(new Map()); // Store changed rows\r\nconst changedRowsInsert = ref(new Map());\r\n\r\nlet fullUrl = urls.value.data;\r\n\r\nif (urls.value.params) {\r\n  const queryString = new URLSearchParams(urls.value.params).toString();\r\n  fullUrl += `?${queryString}`;\r\n}\r\n\r\nconst fetchAllDropdowns = async () => {\r\n  const dropdownKeys = Object.keys(urls.value.dropdowns);\r\n\r\n  for (const key of dropdownKeys) {\r\n    const url = urls.value.dropdowns[key].url;\r\n    const valueField = urls.value.dropdowns[key].valueField;\r\n    const labelField = urls.value.dropdowns[key].labelField;\r\n    \r\n    try {\r\n      const response = await axios.get(url);\r\n\r\n    //   datas.value.dropdowns[labelField] = response.data.map(item => ({\r\n    //     value: item[valueField] ?? \"\",\r\n    //   }));\r\n      datas.value.dropdowns[labelField] = response.data.map((item) => item[valueField] ?? \"\");\r\n    } catch (error) {\r\n      console.error(`Failed to fetch ${key} data from ${url}:`, error);\r\n    }\r\n  }\r\n//   console.log(\"Fetched dropdown data:\", Object.keys(datas.value.dropdowns));\r\n};\r\n\r\nconst fetchData = async () => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await axios.get(fullUrl);\r\n    if (response.data.length > 0) {\r\n      const priorityList = fields.value.priority || [];\r\n      const toRemoveList = fields.value.toRemove || [];\r\n      const unpriorityList = fields.value.unpriority || [];\r\n\r\n      const allKeys = Object.keys(response.data[0]);\r\n\r\n      // 1. Prioritized keys\r\n      const prioritizedKeys = priorityList.filter(\r\n        (key) => allKeys.includes(key) &&\r\n                key !== fields.value.firstCol.field &&\r\n                !toRemoveList.includes(key) &&\r\n                !unpriorityList.includes(key)\r\n      );\r\n\r\n      // 2. Unprioritized keys (explicitly listed in unpriority)\r\n      const unprioritizedKeys = unpriorityList.filter(\r\n        (key) => allKeys.includes(key) &&\r\n                key !== fields.value.firstCol.field &&\r\n                !toRemoveList.includes(key) &&\r\n                !prioritizedKeys.includes(key)\r\n      );\r\n\r\n      // 3. Other keys (the rest)\r\n      const otherKeys = allKeys.filter(\r\n        (key) =>\r\n          !prioritizedKeys.includes(key) &&\r\n          !unprioritizedKeys.includes(key) &&\r\n          key !== fields.value.firstCol.field &&\r\n          !toRemoveList.includes(key) &&\r\n          !fields.value.hidden.includes(key)\r\n      );\r\n\r\n      // Final order: priority → other → unpriority\r\n      const orderedKeys = [...prioritizedKeys, ...otherKeys, ...unprioritizedKeys];\r\n        columns.value = [\r\n        {\r\n            label: fields.value.firstCol.label,\r\n            field: fields.value.firstCol.field,\r\n            width: `${fields.value.firstCol.width ?? 80}px`,\r\n            minWidth: \"100px\",\r\n            sortable: true,\r\n            filterable: false,\r\n            editable: false,\r\n            frozen: true,\r\n            type: fields.value.firstCol.type,\r\n            headerClass: \"custom-header\",\r\n        },\r\n        ...(fields.value.status\r\n              ? [\r\n                  {\r\n                    label: fields.value.status.label ?? fields.value.status.field.toUpperCase(),\r\n                    field: fields.value.status.field,\r\n                    sortable: false,\r\n                    filterable: true,\r\n                    filterOptions: { enabled: true, placeholder: 'status' },\r\n                    editable: false,\r\n                    type: \"text\",\r\n                    width: `${fields.value.status.width ?? 120}px`,\r\n                    minWidth: \"100px\",\r\n                    headerClass: \"custom-header\",\r\n                  }\r\n                ]\r\n              : []\r\n            ),\r\n        ...orderedKeys.map((key) => {\r\n            const isCheckbox = fields.value.checkbox.includes(key);\r\n\r\n            const isNumeric =\r\n                !isCheckbox &&\r\n                response.data.every((row) => {\r\n                const value = row[key];\r\n                return !isNaN(Number(value));\r\n                });\r\n            const columnDef = fields.value?.columns?.find(col => col.column === key);\r\n\r\n            return {\r\n              label: key.replace(/_/g, \" \").toUpperCase(),\r\n              field: key,\r\n              sortable: true,\r\n              filterable: true,\r\n              filterOptions: { enabled: true, placeholder: `${key}` },\r\n              editable: canUpdate.value && !(fields.value?.uneditable?.includes?.(key)),\r\n              type: isCheckbox ? \"checkbox\" : isNumeric ? \"number\" : \"text\",\r\n              width: `${columnDef?.width ?? (\r\n                Math.max(\r\n                  ...response.data.map(item => String(item?.[key] ?? \"\").length),\r\n                  key.length\r\n                ) * size[0] + size[1]\r\n              )}px`,\r\n              minWidth: `${columnDef?.minWidth ?? size[2]}px`,\r\n              headerClass: \"custome-header\",\r\n            };\r\n            }),\r\n        ];\r\n    }\r\n    insertColumns = computed(() =>\r\n        columns.value.map(col => ({\r\n            ...col,\r\n            filterOptions: { enabled: false },\r\n            sortable: false,\r\n        }))\r\n    );\r\n    datas.value.data = response.data.map((item) => ({\r\n      ...item,\r\n      filterable: true,\r\n    }));\r\n    datas.value.data = response.data.map((item) => {\r\n        const formatted = {};\r\n\r\n        for (const key in item) {\r\n            const value = item[key];\r\n\r\n            if (value === null || value === undefined) {\r\n            formatted[key] = value;\r\n            } else {\r\n            const num = Number(value);\r\n            formatted[key] = isNaN(num) ? String(value) : num;\r\n            }\r\n        }\r\n        if (fields.value.status && fields.value.status.calculate) {\r\n          formatted.status = fields.value.status.calculate(item);\r\n        }\r\n\r\n        // Add your extra field like this\r\n        formatted.filterable = true;\r\n\r\n        return formatted;\r\n    });\r\n\r\n\r\n    filteredData.value = [...datas.value.data]; // Initialize filtered data\r\n\r\n    setTimeout(updateColumnWidths, 500);\r\n  } catch (err) {\r\n    error.value = \"Failed to fetch data\";\r\n    console.error(err);\r\n  } finally {\r\n    loading.value = false;\r\n    addNewRow();\r\n  }\r\n  // console.log(datas.value);\r\n};\r\n\r\nconst addNewRow = () => {\r\n  const newRow = {};\r\n  columns.value.forEach((col) => {\r\n    newRow[col.field] = fields.value.checkbox.includes(col.field) ? 0 : \"\";\r\n  });\r\n  newRow.id = DataInsert.value.length + 1;\r\n  DataInsert.value.push(newRow);\r\n};\r\n\r\n// Track changes\r\nconst trackUpload = (row, field) => {\r\n  if (!changedRowsInsert.value.has(row.id)) {\r\n    changedRowsInsert.value.set(row.id, { ...row });\r\n  } else {\r\n    changedRowsInsert.value.get(row.id)[field] = row[field];\r\n  }\r\n};\r\n\r\nconst upload = async () => {\r\n  try {\r\n    const uploads = Array.from(changedRowsInsert.value.values());\r\n    for (const item of uploads) {\r\n      const uploadItem = { ...item };\r\n      for (const prop of fields.value.toRemove) {\r\n        delete uploadItem[prop];\r\n      }\r\n      delete uploadItem[\"id\"];\r\n      // console.log(uploadItem);\r\n      fields.value.date.forEach((key) => {\r\n        if (\r\n          uploadItem[key] !== null &&\r\n          uploadItem[key] !== undefined &&\r\n          !isNaN(Date.parse(uploadItem[key]))\r\n        ) {\r\n          uploadItem[key] = new Date(uploadItem[key])\r\n            .toISOString()\r\n            .split(\"T\")[0]; // Format: YYYY-MM-DD\r\n        }\r\n      });\r\n      Object.keys(uploadItem).forEach((key) => {\r\n        if (uploadItem[key] === \"\") {\r\n          uploadItem[key] = null;\r\n        }\r\n      });\r\n      await axios.post(urls.value.data, uploadItem);\r\n      await fetchData();\r\n    //   alert(\"Data uploaded Successfully\");\r\n      DataInsert.value = [];\r\n      changedRowsInsert.value.clear();\r\n      window.location.reload();\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Failed to upload: \", err);\r\n    alert(\"Failed to upload\");\r\n  }\r\n};\r\n\r\n// For updates\r\nconst trackChanges = (row, field) => {\r\n  if (!changedRows.value.has(row.id)) {\r\n    changedRows.value.set(row.id, { ...row });\r\n  } else {\r\n    changedRows.value.get(row.id)[field] = row[field];\r\n  }\r\n};\r\n// Save all changes (updates)\r\nconst saveChanges = async () => {\r\n  const updates = Array.from(changedRows.value.values());\r\n  const failedUpdates = [];\r\n\r\n  for (const item of updates) {\r\n    try {\r\n      const updatedItem = Object.fromEntries(\r\n        Object.entries(item).filter(\r\n          ([key]) =>\r\n            !fields.value.exclude.includes(key) &&\r\n            !fields.value.toRemove.includes(key)\r\n        )\r\n      );\r\n\r\n      fields.value.date.forEach((key) => {\r\n        if (\r\n          updatedItem[key] !== null &&\r\n          updatedItem[key] !== undefined &&\r\n          !isNaN(Date.parse(updatedItem[key]))\r\n        ) {\r\n          updatedItem[key] = new Date(updatedItem[key])\r\n            .toISOString()\r\n            .split(\"T\")[0];\r\n        }\r\n      });\r\n\r\n      await axios.put(urls.value.data, updatedItem);\r\n    } catch (err) {\r\n      console.error(\"Failed to update row:\", item.id, err);\r\n      failedUpdates.push(item.id);\r\n    }\r\n  }\r\n\r\n  if (failedUpdates.length > 0) {\r\n    alert(`Some rows failed to save: ${failedUpdates.join(\", \")}`);\r\n  } else {\r\n    alert(\"Changes saved successfully!\");\r\n    window.location.reload();\r\n    changedRows.value.clear();\r\n  }\r\n};\r\n\r\n\r\n\r\n// Export to Excel (filtered data only)\r\nconst exportToExcel = () => {\r\n  const worksheet = XLSX.utils.json_to_sheet(filteredData.value);\r\n  const workbook = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(workbook, worksheet, \"Marketing Data\");\r\n  XLSX.writeFile(workbook, \"Filtered_Marketing_Data.xlsx\");\r\n};\r\n\r\n// Update filtered data when table is filtered\r\nconst onTableFiltered = (filteredRows) => {\r\n  filteredData.value = filteredRows;\r\n  log(\"Length : \" + filteredData.value.length);\r\n  log(\"onTableFiltered : \", filteredData.value);\r\n  // console.log(\"F Len : \", filteredData.value.length, \" | M Len : \", datas.value.data.length);\r\n};\r\n\r\n// Dynamic Column Width Calculation\r\nconst updateColumnWidths = () => {\r\n  const secondCol = document.querySelector(\".vue-good-table th:nth-child(1)\");\r\n  if (secondCol) secondColumnWidth.value = secondCol.offsetWidth + \"px\";\r\n  document.documentElement.style.setProperty(\r\n    \"--second-column-width\",\r\n    secondColumnWidth.value\r\n  );\r\n};\r\n\r\nconst getLoading = () => {\r\n  return loading.value;\r\n}\r\n\r\ndefineExpose({\r\n  datas,\r\n  loading,\r\n  getLoading\r\n});\r\n\r\nonMounted(() => {\r\n    fetchAllDropdowns();\r\n    fetchData();\r\n    // console.log(datas.value.dropdowns);\r\n\r\n  window.addEventListener(\"resize\", updateColumnWidths);\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  window.removeEventListener(\"resize\", updateColumnWidths);\r\n});\r\n\r\nconst formatDate = (value) => {\r\n  if (value) {\r\n    const [date, time] = value.split(' ');  // Split the date and time\r\n    const formattedDate = `${date}T${time.slice(0, 5)}`;  // Extract 'YYYY-MM-DDTHH:MM'\r\n    return formattedDate; // For example: '2025-04-22T11:41'\r\n  }\r\n  return ''; // Return empty string if value is null or undefined\r\n};\r\nconst unformatDate = (value) => {\r\n    if (value) {\r\n      const [date, time] = value.split('T');\r\n      const formattedTime = `${time}:00`;  // Add seconds to the time\r\n      return `${date} ${formattedTime}`; // For example: '2025-04-22 11:41:00'\r\n    }\r\n    return ''; // Return empty string if value is null or undefined\r\n};\r\nconst onDateChanges = (event, row, field) => {\r\n    row[field] = unformatDate(event.target.value); // Update value in the row\r\n    trackChanges(row, field); // Track the changes\r\n};\r\nconst onDateUpload = (event, row, field) => {\r\n    row[field] = unformatDate(event.target.value); // Update value in the row\r\n    trackUpload(row, field); // Track the changes\r\n};\r\nconst showForm = ref(false);\r\n</script>\r\n\r\n<template>\r\n  <div class=\"container-global mb-4\">\r\n    <h2>{{ settings.title }}</h2>\r\n    <button v-if=\"canInsert\" @click=\"upload\">Upload</button>\r\n    <button v-if=\"canInsert\" @click=\"addNewRow\">Add New Row</button>\r\n    <p v-if=\"loading\">Loading...</p>\r\n    <p v-if=\"error\" class=\"error\">{{ error }}</p>\r\n    <!-- INSERT TABLE -->\r\n    <div class=\"table-container\">\r\n      <vue-good-table\r\n        v-if=\"!loading && !error && canInsert\"\r\n        :columns=\"insertColumns\"\r\n        :rows=\"DataInsert\"\r\n        :search-options=\"{ enabled: false }\"\r\n        :sort-options=\"{ enabled: false }\"\r\n        :line-numbers=\"false\"\r\n        :select-options=\"{ enabled: false }\"\r\n        :pagination-options=\"{ enabled: false }\"\r\n        style=\"overflow-x: auto\"\r\n      >\r\n        <template v-slot:table-row=\"props\">\r\n          <template v-if=\"fields.checkbox.includes(props.column.field)\">\r\n            <div class=\"checkbox-container\">\r\n              <input\r\n                type=\"checkbox\"\r\n                name=\"custom-checkbox\"\r\n                class=\"custom-checkbox\"\r\n                :checked=\"props.row[props.column.field] == 1\"\r\n                @click=\"(event) => {\r\n                    props.row[props.column.field] = event.target.checked ? 1 : 0;\r\n                    trackUpload(props.row, props.column.field);\r\n                  }\"\r\n                />\r\n            </div>\r\n          </template>\r\n          <template v-else-if=\"Object.keys(datas.dropdowns).includes(props.column.field)\">\r\n            <Multiselect\r\n                v-model=\"props.row[props.column.field]\"\r\n                :options=\"datas.dropdowns[props.column.field] || []\"\r\n                :searchable=\"true\"\r\n                :allow-empty=\"false\"\r\n                :placeholder=\"`Select ${props.column.field}`\"\r\n                @update:modelValue=\"trackUpload?.(props.row, props.column.field) || trackChanges?.(props.row, props.column.field)\"\r\n            />\r\n            </template>\r\n          <template v-else-if=\"fields.date.includes(props.column.field)\">\r\n            <input\r\n              type=\"date\"\r\n              v-model=\"props.row[props.column.field]\"\r\n              @input=\"trackUpload(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"fields.datetime.includes(props.column.field)\">\r\n            <input\r\n              type=\"datetime-local\"\r\n              :value=\"formatDate(props.row[props.column.field])\"\r\n              @input=\"onDateUpload($event, props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"props.column.editable !== false\">\r\n            <input\r\n              v-model=\"props.row[props.column.field]\"\r\n              @input=\"trackUpload(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else>\r\n            <span>{{ props.row[props.column.field] }}</span>\r\n          </template>\r\n        </template>\r\n      </vue-good-table>\r\n    </div>\r\n  <div class=\"mb-2\">\r\n    <VButton @click=\"exportToExcel\"type=\"submit\" color=\"danger\" size=\"md\" :block=\"false\" class=\"me-2\">Export to Excel</VButton>\r\n   <!-- <VButton @click=\"showForm = true\" color=\"danger\" class=\"me-2\">Add New</VButton> -->\r\n    <VButton v-if=\"canUpdate\" @click=\"saveChanges\" type=\"submit\" color=\"danger\" size=\"md\" :block=\"false\">Save Updates</VButton>\r\n  </div> \r\n <!-- <div v-if=\"showForm\" class=\"modal-form\">\r\n  <button class=\"close-btn\" @click=\"showForm = false\">✖</button>\r\n  <MiniForm\r\n    v-if=\"settings.canInsert\"\r\n      v-model=\"formData\"\r\n      :fields=\"fields\"\r\n      :urls=\"urls\"\r\n    />\r\n</div>-->\r\n\r\n    <!-- UPDATE TABLE -->\r\n    <div class=\"table-container\">\r\n      <vue-good-table\r\n        v-if=\"!loading && !error\"\r\n        :columns=\"columns\"\r\n        :rows=\"datas.data\"\r\n        :pagination-options=\"{ enabled: true, mode: 'pages', perPage: 10 }\"\r\n        :search-options=\"{ enabled: true }\"\r\n        :sort-options=\"{ enabled: true }\"\r\n        style=\"overflow-x: auto\"\r\n        @on-filtered=\"onTableFiltered\"\r\n        styleClass=\"vgt-table striped\"\r\n      >\r\n        <template v-slot:table-row=\"props\">\r\n          <template v-if=\"fields.checkbox.includes(props.column.field)\">\r\n            <div class=\"checkbox-container\">\r\n              <input\r\n                type=\"checkbox\"\r\n                class=\"custom-checkbox\"\r\n                :checked=\"props.row[props.column.field] == 1\"\r\n                @click=\"(event) => {\r\n                    props.row[props.column.field] = event.target.checked ? 1 : 0;\r\n                    trackChanges(props.row, props.column.field);\r\n                  }\"\r\n                />\r\n            </div>\r\n          </template>\r\n          <template v-else-if=\"Object.keys(datas.dropdowns).includes(props.column.field) && canUpdate\">\r\n            <Multiselect\r\n                v-model=\"props.row[props.column.field]\"\r\n                :options=\"datas.dropdowns[props.column.field] || []\"\r\n                :searchable=\"true\"\r\n                :allow-empty=\"false\"\r\n                :placeholder=\"`Select ${props.column.field}`\"\r\n\r\n                noResultsText=\"No matching results\"\r\n                @update:modelValue=\"trackUpload?.(props.row, props.column.field) || trackChanges?.(props.row, props.column.field)\"\r\n            />\r\n            </template>\r\n          <!-- <template v-else-if=\"props.column.field === 'name_customer'\">\r\n            <Multiselect\r\n              v-model=\"props.row[props.column.field]\"\r\n              :options=\"datas.dropdowns.name_customer || []\"\r\n              :searchable=\"true\"\r\n              :allow-empty=\"false\"\r\n              placeholder=\"Select customer...\"\r\n              noResultsText=\"No matching customers found\"\r\n              @update:modelValue=\"trackChanges(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"props.column.field === 'location'\">\r\n            <Multiselect\r\n              v-model=\"props.row[props.column.field]\"\r\n              :options=\"datas.dropdowns.location || []\"\r\n              :searchable=\"true\"\r\n              :allow-empty=\"true\"\r\n              placeholder=\"Select location...\"\r\n              noResultsText=\"No matching customers found\"\r\n              @update:modelValue=\"trackChanges(props.row, props.column.field)\"\r\n            />\r\n          </template> -->\r\n          <template v-else-if=\"fields.date.includes(props.column.field)\">\r\n            <input\r\n              type=\"date\"\r\n              v-model=\"props.row[props.column.field]\"\r\n              @input=\"trackChanges(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"fields.datetime.includes(props.column.field)\">\r\n            <input\r\n              type=\"datetime-local\"\r\n              :value=\"formatDate(props.row[props.column.field])\"\r\n              @input=\"onDateChanges($event, props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n\r\n          <template v-else-if=\"props.column.editable !== false\">\r\n            <input\r\n              v-model=\"props.row[props.column.field]\"\r\n              @input=\"trackChanges(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else>\r\n            <span>{{ props.row[props.column.field] }}</span>\r\n          </template>\r\n        </template>\r\n      </vue-good-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.card{\r\n  border: #ffffff;\r\n}\r\n/* .table-container {\r\n  width: 100%;\r\n  overflow-x: auto;\r\n  max-width: 100%;\r\n  position: relative;\r\n  margin-top: \"200px\";\r\n  height: 100%;\r\n  padding: 0px 0px;\r\n} */\r\n\r\n.vgt-table th { /* table header */\r\n  padding: 0.5px 5px;\r\n  font-size: 13px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n}\r\n\r\ntable.vgt-table td {/* table row / cell */\r\n  padding: 5px 5px;\r\n}\r\n\r\n.checkbox-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 75%;\r\n  padding: 1px;\r\n}\r\n.checkbox{\r\n  color:#000000\r\n}\r\n\r\n.error {\r\n  color: red;\r\n}\r\ninput {\r\n  padding: 0px 0px;\r\n  font-size: 12px; /* font size */\r\n  width: 100%;\r\n  margin: 0px 0px;\r\n  border: none !important;\r\n  outline: none !important;\r\n  height: 100%;\r\n}\r\n\r\n.vgt-wrap__footer .footer__row-count__label,\r\n.vgt-wrap__footer .footer__row-count__select,\r\n.vgt-wrap__footer .footer__navigation__page-btn span,\r\n.vgt-wrap__footer .footer__navigation__page-info span {\r\n    font-size: 12px;\r\n}\r\n\r\n.multiselect__content-wrapper {\r\n  position:absolute !important;\r\n  z-index: 9999 !important;\r\n  min-height: 100px !important;\r\n  max-height: 100px !important;\r\n  overflow-y: auto !important;\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n.custom-checkbox {\r\n  appearance: none;\r\n  -webkit-appearance: none;\r\n  width: 16px;\r\n  height: 16px;\r\n  border: 2px solid #db0000;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  position: relative;\r\n  background-color: #ebe1e1;\r\n}\r\n\r\n.custom-checkbox:checked {\r\n  background-color: #dc3545;\r\n  border-color: #ffffff;\r\n}\r\n\r\n.custom-checkbox:checked::after {\r\n  content: '✔';\r\n  color: rgb(255, 255, 255);\r\n  font-size: 12px;\r\n  position: center;\r\n  left: 2px;\r\n  top: -1px;\r\n}\r\n.vgt-left-align {\r\n  font-size: 12px;\r\n  color: #1a1a1a !important;\r\n}\r\n.vgt-right-align {\r\n  font-size: 12px;\r\n  color: #1a1a1a !important;\r\n}\r\n\r\n.modal-form {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: rgba(0, 0, 0, 0.4); /* backdrop */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal-form > * {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  max-height: 90vh;\r\n  overflow-y: auto;\r\n  width: 90%;\r\n  max-width: 800px;\r\n}\r\n\r\n.close-btn {\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 20px;\r\n  background: none;\r\n  border: none;\r\n  font-size: 22px;\r\n  color: white;\r\n  cursor: pointer;\r\n}\r\n\r\n/* Light Mode (default) */\r\n.table-container {\r\n  background-color: #fff;\r\n  color: #000;\r\n}\r\n\r\n.vgt-table {\r\n  background-color: #fff;\r\n  color: #000;\r\n}\r\n\r\n.vgt-table th,\r\n.vgt-table td {\r\n  background-color: #fff;\r\n  color: #000;\r\n}\r\n\r\n/* Dark Mode */\r\n.dark .table-container {\r\n  background-color: #fff;\r\n  color: #000;\r\n}\r\n\r\n.dark .vgt-table {\r\n  background-color: #fff;\r\n  color: #000;\r\n}\r\n\r\n.dark .vgt-table th,\r\n.dark .vgt-table td {\r\n  background-color: #fff;\r\n  color: #000;\r\n}\r\n\r\n.dark .vgt-left-align,\r\n.dark .vgt-right-align {\r\n  background-color: #fff;\r\n  color: #000;\r\n}\r\n\r\n/* Footer */\r\n.dark .vgt-wrap__footer {\r\n  background-color: #fff;\r\n  color: #000;\r\n}\r\n\r\n.dark .vgt-wrap__footer select {\r\n  background-color: #fff;\r\n  color: #000;\r\n}\r\n\r\n</style>\r\n"],"names":["useUserStore","props","__props","settings","ref","urls","fields","canInsert","canUpdate","value","size","Array","isArray","toRemove","push","datas","data","dropdowns","columns","insertColumns","DataInsert","filteredData","loading","error","secondColumnWidth","changedRows","Map","changedRowsInsert","fullUrl","params","queryString","URLSearchParams","toString","fetchData","async","response","axios","get","length","priorityList","priority","toRemoveList","unpriorityList","unpriority","allKeys","Object","keys","prioritizedKeys","filter","key","includes","firstCol","field","unprioritizedKeys","otherKeys","hidden","orderedKeys","label","width","minWidth","sortable","filterable","editable","frozen","type","headerClass","status","toUpperCase","filterOptions","enabled","placeholder","map","isCheckbox","checkbox","isNumeric","every","row","isNaN","Number","columnDef","_b","_a","find","col","column","replace","_e","_d","_c","uneditable","call","Math","max","item","String","computed","formatted","num","calculate","setTimeout","updateColumnWidths","err","addNewRow","newRow","forEach","id","trackUpload","has","set","upload","uploads","from","values","uploadItem","prop","date","Date","parse","toISOString","split","post","clear","window","location","reload","alert","trackChanges","saveChanges","updates","failedUpdates","updatedItem","fromEntries","entries","exclude","put","join","exportToExcel","worksheet","XLSX.utils","json_to_sheet","workbook","book_new","utils","book_append_sheet","XLSX.writeFile","onTableFiltered","filteredRows","log","secondCol","document","querySelector","offsetWidth","documentElement","style","setProperty","__expose","getLoading","onMounted","dropdownKeys","url","valueField","labelField","addEventListener","onBeforeUnmount","removeEventListener","formatDate","time","slice","unformatDate","event","target"],"mappings":"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"}