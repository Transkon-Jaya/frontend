import{_ as p,c as h,a,q as m,t as o,F as f,j as u,E as v,g as c,z as g}from"./index-DDtFK-1e.js";const y={name:"MemoryMatch",data(){return{allEmojis:["🍕","🍔","🍟","🌭","🍿","🥪","🍣","🍩","🍇","🍉","🍎","🍌","🍒","🍓","🥑","🥝","🍍","🍬","🍰","🍪"],emojis:[],cards:[],flippedIndexes:[],tries:0,score:0,level:1,isFinalLevel:!1,canFlip:!0}},computed:{gameWon(){return this.score===this.emojis.length},gridStyle(){const i=Math.min(6,Math.ceil(Math.sqrt(this.cards.length)));return{gridTemplateColumns:`repeat(${i}, 60px)`,gridTemplateRows:`repeat(${Math.ceil(this.cards.length/i)}, 60px)`}}},mounted(){this.initGame()},methods:{initGame(){this.tries=0,this.score=0,this.flippedIndexes=[],this.canFlip=!0;const i=Math.floor(this.allEmojis.length/2),e=Math.min(3+this.level,i);e>=i&&(this.isFinalLevel=!0);const s=this.shuffle([...this.allEmojis]).slice(0,e);this.emojis=s;const n=[...s,...s];this.cards=this.shuffle(n).map(t=>({symbol:t,flipped:!1,matched:!1}))},shuffle(i){const e=[...i];for(let s=e.length-1;s>0;s--){const n=Math.floor(Math.random()*(s+1));[e[s],e[n]]=[e[n],e[s]]}return e},flipCard(i){if(!this.canFlip)return;const e=this.cards[i];if(!(e.flipped||e.matched||this.flippedIndexes.length>=2)&&(e.flipped=!0,this.flippedIndexes.push(i),this.flippedIndexes.length===2)){this.tries++;const[s,n]=this.flippedIndexes,t=this.cards[s],l=this.cards[n];t.symbol===l.symbol?(t.matched=l.matched=!0,this.score++,this.flippedIndexes=[]):(this.canFlip=!1,setTimeout(()=>{t.flipped=l.flipped=!1,this.flippedIndexes=[],this.canFlip=!0},1e3))}},nextLevel(){this.level++,this.initGame()},restartGame(){this.level=1,this.isFinalLevel=!1,this.initGame()}}},x={class:"memory-game"},M=["onClick"],_={class:"front"},C={key:0,class:"congrats"};function F(i,e,s,n,t,l){return c(),h("div",x,[e[2]||(e[2]=a("h1",null,"🎯 Memory Match",-1)),a("p",null,"Level: "+o(t.level)+" | Score: "+o(t.score)+" | Tries: "+o(t.tries),1),a("p",null,"Match "+o(t.emojis.length)+" pairs to complete the level",1),a("div",{class:"grid",style:v(l.gridStyle)},[(c(!0),h(f,null,u(t.cards,(r,d)=>(c(),h("div",{class:g(["card",{flipped:r.flipped||r.matched,matched:r.matched}]),key:d,onClick:L=>l.flipCard(d)},[a("div",_,o(r.flipped||r.matched?r.symbol:"❓"),1)],10,M))),128))],4),l.gameWon?(c(),h("div",C,[a("h2",null,"🎉 Level "+o(t.level)+" Complete!",1),a("p",null,"You finished in "+o(t.tries)+" tries",1),t.isFinalLevel?(c(),h("button",{key:1,onClick:e[1]||(e[1]=(...r)=>l.restartGame&&l.restartGame(...r))},"Play Again")):(c(),h("button",{key:0,onClick:e[0]||(e[0]=(...r)=>l.nextLevel&&l.nextLevel(...r))},"Next Level"))])):m("",!0)])}const j=p(y,[["render",F],["__scopeId","data-v-804b90d9"]]);export{j as default};
