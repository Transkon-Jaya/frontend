{"version":3,"file":"ImageViewerTest-5dm2xLGp.js","sources":["../../src/components/ImageViewer.vue","../../src/views/ImageViewerTest.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"isOpen\" class=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center\">\r\n      <!-- Image Modal -->\r\n      <div class=\"relative max-w-[90vw] max-h-[80vh] flex flex-col items-center bg-white p-4 rounded-lg\">\r\n        <!-- Image -->\r\n        <img\r\n          :src=\"currentImage.url\"\r\n          @load=\"onImageLoad\"\r\n          :class=\"{ 'rotate-landscape': isLandscape }\"\r\n          class=\"max-w-full max-h-[70vh] object-contain transition-transform duration-300\"\r\n        />\r\n  \r\n        <!-- Info: Username and Name -->\r\n        <div class=\"absolute top-4 left-4 text-white\">\r\n          <p class=\"text-lg font-semibold\">{{ currentImage.username }}</p>\r\n          <p class=\"text-sm\">{{ currentImage.name }}</p>\r\n        </div>\r\n  \r\n        <!-- Navigation Buttons -->\r\n        <div class=\"flex gap-4 mt-4 text-white\">\r\n          <button @click=\"prevImage\" class=\"px-4 py-1 bg-gray-700 rounded hover:bg-gray-600\">Prev</button>\r\n          <button @click=\"toggleAutoPlay\" class=\"px-4 py-1 bg-gray-700 rounded hover:bg-gray-600\">\r\n            {{ isPlaying ? 'Pause' : 'Play' }}\r\n          </button>\r\n          <button @click=\"nextImage\" class=\"px-4 py-1 bg-gray-700 rounded hover:bg-gray-600\">Next</button>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Close Button -->\r\n      <div class=\"absolute top-4 right-4 text-white text-3xl cursor-pointer\" @click=\"emit('close')\">\r\n        &times;\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, computed, watch, onUnmounted } from 'vue';\r\n  \r\n  const props = defineProps({\r\n    images: Array,\r\n    isOpen: Boolean,\r\n    startIndex: Number,\r\n  });\r\n  const emit = defineEmits(['close']);\r\n  \r\n  const currentIndex = ref(0);\r\n  const isPlaying = ref(false);\r\n  const isLandscape = ref(false);\r\n  let interval = null;\r\n  \r\n  const currentImage = computed(() => props.images?.[currentIndex.value] || {});\r\n  \r\n  watch(\r\n    () => props.startIndex,\r\n    (newIndex) => {\r\n      currentIndex.value = newIndex ?? 0;\r\n    },\r\n    { immediate: true }\r\n  );\r\n  \r\n  watch(\r\n    () => props.isOpen,\r\n    (open) => {\r\n      if (open) {\r\n        window.addEventListener('keydown', handleKey);\r\n      } else {\r\n        stopAutoPlay();\r\n        window.removeEventListener('keydown', handleKey);\r\n      }\r\n    }\r\n  );\r\n  \r\n  onUnmounted(() => {\r\n    stopAutoPlay();\r\n    window.removeEventListener('keydown', handleKey);\r\n  });\r\n  \r\n  const onImageLoad = (e) => {\r\n    const img = e.target;\r\n    isLandscape.value = img.naturalWidth > img.naturalHeight;\r\n  };\r\n  \r\n  const nextImage = () => {\r\n    currentIndex.value = (currentIndex.value + 1) % props.images.length;\r\n  };\r\n  \r\n  const prevImage = () => {\r\n    currentIndex.value = (currentIndex.value - 1 + props.images.length) % props.images.length;\r\n  };\r\n  \r\n  const toggleAutoPlay = () => {\r\n    if (isPlaying.value) {\r\n      stopAutoPlay();\r\n    } else {\r\n      isPlaying.value = true;\r\n      interval = setInterval(nextImage, 3000); // Play every 3 seconds\r\n    }\r\n  };\r\n  \r\n  const stopAutoPlay = () => {\r\n    clearInterval(interval);\r\n    interval = null;\r\n    isPlaying.value = false;\r\n  };\r\n  \r\n  const handleKey = (e) => {\r\n    if (!props.isOpen) return;\r\n    switch (e.key) {\r\n      case 'ArrowRight':\r\n        nextImage();\r\n        break;\r\n      case 'ArrowLeft':\r\n        prevImage();\r\n        break;\r\n      case ' ':\r\n        e.preventDefault();\r\n        toggleAutoPlay();\r\n        break;\r\n      case 'Escape':\r\n      case 'Delete':\r\n        emit('close');\r\n        break;\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Modal Overlay */\r\n  .fixed {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 50;\r\n  }\r\n  \r\n  /* Modal Background */\r\n  .bg-opacity-50 {\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n  }\r\n  \r\n  /* Image rotation (landscape) */\r\n  .rotate-landscape {\r\n    transform: rotate(90deg);\r\n    max-width: 80vh;\r\n    max-height: 80vw;\r\n  }\r\n  \r\n  /* Modal content area */\r\n  .relative {\r\n    position: relative;\r\n  }\r\n  \r\n  .max-w-[90vw] {\r\n    max-width: 90vw;\r\n  }\r\n  \r\n  .max-h-[80vh] {\r\n    max-height: 80vh;\r\n  }\r\n  \r\n  .bg-white {\r\n    background-color: white;\r\n  }\r\n  \r\n  .p-4 {\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .rounded-lg {\r\n    border-radius: 0.5rem;\r\n  }\r\n  \r\n  /* Navigation button style */\r\n  button {\r\n    font-size: 14px;\r\n    padding: 0.5rem 1rem;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #555;\r\n  }\r\n  \r\n  /* Close button */\r\n  .text-3xl {\r\n    font-size: 1.875rem;\r\n  }\r\n  </style>\r\n  ","<template>\r\n    <div class=\"container\">\r\n      <!-- Gallery Display -->\r\n      <h2>Gallery</h2>\r\n      <div class=\"gallery\">\r\n        <div\r\n          v-for=\"(item, idx) in imageData\"\r\n          :key=\"idx\"\r\n          class=\"thumb-container\"\r\n          @click=\"openViewer(idx)\"\r\n        >\r\n          <!-- Image with rotation for landscape -->\r\n          <img \r\n            :src=\"item.url\" \r\n            class=\"thumb\" \r\n            :class=\"{ 'rotate-landscape': isLandscape(item.url) }\" \r\n          />\r\n          <p>{{ item.username }}</p>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- ImageViewer Modal -->\r\n      <ImageViewer\r\n        :images=\"imageData\"\r\n        :isOpen=\"modalOpen\"\r\n        :startIndex=\"startIndex\"\r\n        @close=\"modalOpen = false\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  \r\n  <script setup>\r\n  import { ref } from 'vue';\r\n  import ImageViewer from '@/components/ImageViewer.vue';\r\n  import { PHOTO_BASE_URL } from '@/config/config';\r\n  \r\n  const modalOpen = ref(false);\r\n  const startIndex = ref(0);\r\n  const imageData = ref([\r\n    {\r\n      url: PHOTO_BASE_URL + \"/absensi/\" + \"Rosiman_IN_1746148802.jpg\",\r\n      username: 'john_doe',\r\n      name: 'John Doe',\r\n    },\r\n    {\r\n      url: PHOTO_BASE_URL + \"/absensi/\" + 'Tj1023_IN_1746138582.jpg',\r\n      username: 'jane_smith',\r\n      name: 'Jane Smith',\r\n    },\r\n    {\r\n      url: PHOTO_BASE_URL + \"/absensi/\" + 'furqon_IN_1745814862.jpg',\r\n      username: 'alex_ray',\r\n      name: 'Alex Ray',\r\n    },\r\n    {\r\n      url: PHOTO_BASE_URL + \"/absensi/\" + 'admin-site_IN_1745288417.jpeg',\r\n      username: 'jane_smith',\r\n      name: 'Jane Smith',\r\n    },\r\n  ]);\r\n  \r\n  // Open modal with selected image\r\n  const openViewer = (idx) => {\r\n    startIndex.value = idx;\r\n    modalOpen.value = true;\r\n  };\r\n  \r\n  // Check if image is landscape\r\n  const isLandscape = (url) => {\r\n    // Replace this with actual logic to determine if an image is landscape or not\r\n    const image = new Image();\r\n    image.src = url;\r\n    return image.width > image.height;\r\n  };\r\n  </script>\r\n\r\n<style scoped>\r\n.thumb-container {\r\n  cursor: pointer;\r\n  width: 150px;\r\n  text-align: center;\r\n}\r\n\r\n.thumb-wrapper {\r\n  width: 150px;\r\n  height: 150px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.thumb {\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  transition: transform 0.3s ease;\r\n  object-fit: contain;\r\n}\r\n\r\n.rotate-landscape {\r\n  transform: rotate(90deg);\r\n}\r\n</style>\r\n\r\n  \r\n  "],"names":["props","__props","emit","__emit","currentIndex","ref","isPlaying","isLandscape","interval","currentImage","computed","_a","watch","newIndex","open","handleKey","stopAutoPlay","onUnmounted","onImageLoad","e","img","nextImage","prevImage","toggleAutoPlay","modalOpen","startIndex","imageData","PHOTO_BASE_URL","openViewer","idx","url","image"],"mappings":"8kBAsCE,MAAMA,EAAQC,EAKRC,EAAOC,EAEPC,EAAeC,EAAI,CAAC,EACpBC,EAAYD,EAAI,EAAK,EACrBE,EAAcF,EAAI,EAAK,EAC7B,IAAIG,EAAW,KAEf,MAAMC,EAAeC,EAAS,WAAM,QAAAC,EAAAX,EAAM,SAAN,YAAAW,EAAeP,EAAa,SAAU,CAAA,EAAE,EAE5EQ,EACE,IAAMZ,EAAM,WACXa,GAAa,CACZT,EAAa,MAAQS,GAAY,CAClC,EACD,CAAE,UAAW,EAAM,CACvB,EAEED,EACE,IAAMZ,EAAM,OACXc,GAAS,CACJA,EACF,OAAO,iBAAiB,UAAWC,CAAS,GAE5CC,IACA,OAAO,oBAAoB,UAAWD,CAAS,EAElD,CACL,EAEEE,EAAY,IAAM,CAChBD,IACA,OAAO,oBAAoB,UAAWD,CAAS,CACnD,CAAG,EAED,MAAMG,EAAeC,GAAM,CACzB,MAAMC,EAAMD,EAAE,OACdZ,EAAY,MAAQa,EAAI,aAAeA,EAAI,aAC/C,EAEQC,EAAY,IAAM,CACtBjB,EAAa,OAASA,EAAa,MAAQ,GAAKJ,EAAM,OAAO,MACjE,EAEQsB,EAAY,IAAM,CACtBlB,EAAa,OAASA,EAAa,MAAQ,EAAIJ,EAAM,OAAO,QAAUA,EAAM,OAAO,MACvF,EAEQuB,EAAiB,IAAM,CACvBjB,EAAU,MACZU,KAEAV,EAAU,MAAQ,GAClBE,EAAW,YAAYa,EAAW,GAAI,EAE5C,EAEQL,EAAe,IAAM,CACzB,cAAcR,CAAQ,EACtBA,EAAW,KACXF,EAAU,MAAQ,EACtB,EAEQS,EAAaI,GAAM,CACvB,GAAKnB,EAAM,OACX,OAAQmB,EAAE,IAAG,CACX,IAAK,aACHE,IACA,MACF,IAAK,YACHC,IACA,MACF,IAAK,IACHH,EAAE,eAAc,EAChBI,IACA,MACF,IAAK,SACL,IAAK,SACHrB,EAAK,OAAO,EACZ,KACH,CACL,w1BCtFE,MAAMsB,EAAYnB,EAAI,EAAK,EACrBoB,EAAapB,EAAI,CAAC,EAClBqB,EAAYrB,EAAI,CACpB,CACE,IAAKsB,EAAiB,qCACtB,SAAU,WACV,KAAM,UACP,EACD,CACE,IAAKA,EAAiB,oCACtB,SAAU,aACV,KAAM,YACP,EACD,CACE,IAAKA,EAAiB,oCACtB,SAAU,WACV,KAAM,UACP,EACD,CACE,IAAKA,EAAiB,yCACtB,SAAU,aACV,KAAM,YACP,CACL,CAAG,EAGKC,EAAcC,GAAQ,CAC1BJ,EAAW,MAAQI,EACnBL,EAAU,MAAQ,EACtB,EAGQjB,EAAeuB,GAAQ,CAE3B,MAAMC,EAAQ,IAAI,MAClB,OAAAA,EAAM,IAAMD,EACLC,EAAM,MAAQA,EAAM,MAC/B"}