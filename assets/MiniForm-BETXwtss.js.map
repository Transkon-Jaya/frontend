{"version":3,"file":"MiniForm-BETXwtss.js","sources":["../../src/components/MiniForm.vue"],"sourcesContent":["<script setup>\r\nimport { ref, watch, onMounted, computed } from 'vue';\r\nimport Multiselect from \"vue-multiselect\";\r\nimport \"vue-multiselect/dist/vue-multiselect.css\";\r\nimport axios from 'axios';\r\nimport { log } from '@/utils/logger';\r\n\r\nimport { useUserStore} from \"@/stores/user.js\";\r\nimport { API_BASE_URL } from '@/config/config';\r\nconst userData = useUserStore();\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: Object,\r\n    default: () => ({}), // Make sure it's defaulting to an empty object\r\n  },\r\n  fields: Object,     // same as MiniTable\r\n  urls: Object,       // accept urls for data and dropdowns\r\n});\r\n\r\nconst emit = defineEmits(['update:modelValue']);\r\n\r\nconst formData = ref({ ...props.modelValue });\r\nconst dropdownData = ref({});\r\nconst dropdownsLoaded = ref(false);\r\n\r\n\r\n// Fetch dropdown data when component is mounted\r\nconst fetchDropdowns = async () => {\r\n  const fetchPromises = Object.entries(props.urls.dropdowns).map(async ([key, dropdown]) => {\r\n    try {\r\n      const response = await axios.get(dropdown.url);\r\n      dropdownData.value[key] = response.data.map(item => ({\r\n        label: item,\r\n        value: item\r\n      }));\r\n    } catch (error) {\r\n      console.error(`Failed to fetch dropdown data for ${key}:`, error);\r\n    }\r\n  });\r\n\r\n  await Promise.all(fetchPromises);\r\n  dropdownsLoaded.value = true;\r\n};\r\n\r\nonMounted(async () => {\r\n  await fetchDropdowns();\r\n});\r\n\r\n\r\nwatch(() => props.modelValue, (val) => {\r\n  formData.value = { ...val };\r\n});\r\n\r\nconst updateField = async (key, value) => {\r\n  formData.value[key] = value;\r\n  // console.log(\"Key : \", key, \" val : \", formData.value[key]);\r\n  emit('update:modelValue', { ...formData.value });\r\n\r\n  props.fields.columns.forEach(async (field) => {\r\n    if (field.autofill && field.autofill.triggeredBy === key) {\r\n      try {\r\n        const res = await axios.get(API_BASE_URL + \"/\" + field.autofill.url, {\r\n          params: [value.label]\r\n        });\r\n        \r\n        // Extract and update the autofilled field\r\n        const filledValue = field.autofill.getValue(res.data);\r\n        formData.value[field.column] = filledValue;\r\n        emit('update:modelValue', { ...formData.value });\r\n      } catch (err) {\r\n        console.error(`Failed to autofill ${field.column}:`, err);\r\n        formData.value[field.column] = \"\"; // Optional fallback\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n\r\nconst isUneditable = (col) => props.fields.uneditable?.includes(col.column);\r\nconst isType = (type, col) => props.fields[type]?.includes(col.column);\r\n\r\n// Submit form data to the data URL\r\nconst submitForm = async () => {\r\n  try {\r\n    const payload = {};\r\n\r\n    for (const field of props.fields.columns || []) {\r\n      const key = field.column;\r\n\r\n      if (props.fields.toRemove?.includes(key)) continue;\r\n      if (props.fields.exclude?.includes(key)) continue;\r\n\r\n      if (field.compute) {\r\n        payload[key] = field.compute(formData.value);\r\n        if(typeof payload[key] === 'boolean') payload[key] = payload[key] ? 1 : 0;\r\n        continue;\r\n      }\r\n      const isVisible = typeof field.visibleIf === 'function'\r\n        ? field.visibleIf(formData.value)\r\n        : true;\r\n      if (!isVisible) continue;\r\n\r\n      const val = formData.value[key];\r\n\r\n      const isRequired = field.required ?? false;\r\n      const isEmpty =\r\n      val === undefined ||\r\n      val === null ||\r\n      (typeof val === 'string' && val.trim() === '') ||\r\n      (Array.isArray(val) && val.length === 0 && typeof val !== 'boolean');\r\n\r\n      // Required field validation\r\n      if (isRequired && isEmpty) {\r\n        alert(`Field \"${field.label || key}\" is required.`);\r\n        return;\r\n      }\r\n      if (!isRequired && isEmpty) continue\r\n\r\n      // Multiselect (array of objects or strings)\r\n      if (Array.isArray(val)) {\r\n        payload[key] = val.map(v => (v?.label ?? v)).join(',');\r\n      }\r\n      // Single dropdown object\r\n      else if (typeof val === 'object' && 'label' in val) {\r\n        payload[key] = val.label;\r\n      }\r\n      // Primitive value\r\n      else {\r\n        if(typeof val === \"boolean\") payload[key] = val ? 1 : 0;\r\n        else payload[key] = val;\r\n      }\r\n    }\r\n\r\n    payload.username = userData.username;\r\n    console.log(\"payload:\", payload);\r\n\r\n    const response = await axios.post(props.urls.data, payload);\r\n    window.location.reload();\r\n    console.log('Form submitted successfully:', response.data);\r\n  } catch (error) {\r\n    console.error('Failed to submit form:', error);\r\n  }\r\n};\r\n\r\n\r\n\r\nconst resetForm = () => {\r\n  fields.value.columns.forEach(col => {\r\n    formData.value[col.column] = col.default || '';  // Use default value or empty string\r\n  });\r\n};\r\n\r\n\r\nconst visibleColumns = computed(() =>\r\n  props.fields.columns.filter(col =>\r\n    typeof col.visibleIf === \"function\" ? col.visibleIf(formData.value) : true\r\n  )\r\n);\r\nconst previouslyVisible = ref(visibleColumns.value);\r\n\r\n// Clear formData when a column becomes invisible\r\nwatch(visibleColumns, (newVisible) => {\r\n  const currentlyVisible = newVisible.map(col => col.column);\r\n  const noLongerVisible = previouslyVisible.value.filter(col => !currentlyVisible.includes(col));\r\n  noLongerVisible.forEach(col => {\r\n    updateField(col, null); // Or undefined/null if preferred\r\n  });\r\n\r\n  previouslyVisible.value = currentlyVisible;\r\n}, { immediate: true });\r\n\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"container-global mb-4\">\r\n  <div v-if=\"dropdownsLoaded\">\r\n    <form @submit.prevent=\"submitForm\" class=\"mini-form\">\r\n      <div class=\"form-grid\">\r\n        <template v-for=\"(col, index) in visibleColumns\" :key=\"col.column\">\r\n          <div class=\"form-field\">\r\n            <label>{{ col.label }}</label>\r\n\r\n            <!-- Uneditable field -->\r\n            <input\r\n              v-if=\"isUneditable(col)\"\r\n              type=\"text\"\r\n              class=\"input bordered\"\r\n              :value=\"formData[col.column]\"\r\n              disabled\r\n            />\r\n\r\n            <!-- DateTime field -->\r\n            <input\r\n              v-else-if=\"isType('datetime', col)\"\r\n              type=\"datetime-local\"\r\n              class=\"input bordered\"\r\n              :value=\"formData[col.column] || ''\"\r\n              @input=\"e => updateField(col.column, e.target.value)\"\r\n            />\r\n\r\n            <input\r\n              v-else-if=\"isType('number', col)\"\r\n              type=\"number\"\r\n              class=\"input bordered\"\r\n              :value=\"formData[col.column] || ''\"\r\n              @input=\"e => updateField(col.column, e.target.value)\"\r\n            />\r\n\r\n            <!-- Dropdown field -->\r\n            <Multiselect\r\n              v-else-if=\"isType('dropdown', col)\"\r\n              v-model=\"formData[col.column]\"\r\n              :options=\"dropdownData[col.column] || []\"\r\n              placeholder=\"Select\"\r\n              label=\"label\"\r\n              track-by=\"value\"\r\n              class=\"multiselect no-border\"\r\n              @update:modelValue=\"value => updateField(col.column, value)\"\r\n            />\r\n            <!-- Dropdown field -->\r\n            <Multiselect\r\n              v-else-if=\"isType('multiselect', col)\"\r\n              v-model=\"formData[col.column]\"\r\n              :options=\"dropdownData[col.column] || []\"\r\n              placeholder=\"Select\"\r\n              label=\"label\"\r\n              track-by=\"value\"\r\n              class=\"multiselect no-border\"\r\n              :class=\"{ 'multiselect--multiple': isType('multiselect', col) }\"\r\n              multiple=\"true\"\r\n              :close-on-select=\"false\"\r\n              @update:modelValue=\"value => updateField(col.column, value)\"\r\n            />\r\n            <!-- Checkbox field -->\r\n            <div v-else-if=\"isType('checkbox', col)\" class=\"checkbox-field no-border\">\r\n              <input\r\n                type=\"checkbox\"\r\n                :checked=\"formData[col.column]\"\r\n                @change=\"e => updateField(col.column, e.target.checked)\"\r\n                class=\"form-checkbox\"\r\n              />\r\n            </div>\r\n\r\n            <!-- Text field (default) -->\r\n            <input\r\n              v-else\r\n              type=\"text\"\r\n              class=\"form-input bordered\"\r\n              v-model=\"formData[col.column]\"\r\n              :placeholder=\"col.filterText || col.label\"\r\n            />\r\n          </div>\r\n        </template>\r\n      </div>\r\n\r\n      <div class=\"submit-container\">\r\n        <button type=\"submit\" class=\"submit-button bordered\">Submit</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n\r\n  <div v-else class=\"loading-message\">\r\n  <i class=\"pi pi-spin pi-spinner\" style=\"font-size: 1.5rem;\"></i>\r\n  <p>Loading form...</p>\r\n  </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<style scoped>\r\n/* Base border style */\r\n.bordered {\r\n  border: 1px solid #d3d3d3 !important;\r\n  border-radius: 4px;\r\n}\r\n\r\n/* Hilangkan border untuk Multiselect */\r\n.multiselect.no-border {\r\n  border: none !important;\r\n  box-shadow: none !important;\r\n  padding-left: 0;\r\n  padding-right: 0;\r\n}\r\n\r\n/* Optional: Atur ulang tampilan bagian dalam jika ingin lebih clean */\r\n.multiselect.no-border .multiselect__tags {\r\n  border: none !important;\r\n  padding-left: 0;\r\n  padding-right: 0;\r\n \r\n}\r\n\r\n.multiselect.no-border .multiselect__select {\r\n  display: none; /* sembunyikan ikon dropdown panah jika mau minimalis */\r\n}\r\n\r\n.mini-form {\r\n  width: 100%;\r\n  margin: 0 auto;\r\n}\r\n\r\n.form-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 20px;\r\n  width: 100%;\r\n}\r\n\r\n.form-field {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  width: 100%;\r\n}\r\n\r\n.form-field label {\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n}\r\n\r\n.form-input,\r\n.multiselect {\r\n  width: 100%;\r\n  padding: 10px 12px;\r\n  font-size: 14px;\r\n  transition: border-color 0.2s;\r\n  height: 40px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.form-input:focus {\r\n  outline: none;\r\n  border-color: #db0000;\r\n  box-shadow: 0 0 0 2px rgba(219, 0, 0, 0.1);\r\n}\r\n\r\n/* Style khusus untuk Multiselect */\r\n.multiselect {\r\n  min-height: 40px;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n}\r\n\r\n/* Style untuk checkbox */\r\n.checkbox-field {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  height: 40px;\r\n  padding: 10px 0;\r\n}\r\n\r\n.form-checkbox {\r\n  width: 18px;\r\n  height: 18px;\r\n  accent-color: #db0000;\r\n}\r\n\r\n/* Style untuk tombol submit */\r\n.submit-container {\r\n  margin-top: 24px;\r\n  text-align: right;\r\n}\r\n\r\n.submit-button {\r\n  padding: 10px 24px;\r\n  background-color: #db0000;\r\n  color: white;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.submit-button:hover {\r\n  background-color: #ff2424;\r\n}\r\n\r\n/* Style untuk loading state */\r\n.loading-message {\r\n  text-align: center;\r\n  padding: 20px;\r\n  color: #252525;\r\n}\r\n\r\n.input {\r\n  padding-left: 0;\r\n  padding-right: 0;\r\n  height: 40px;\r\n  background: transparent;\r\n  padding: 10px 12px;\r\n  font-size: 14px;\r\n}\r\n\r\n/* Card border \r\n.card {\r\n  border: 1px solid #d3d3d3;\r\n  table-layout: fixed;\r\n  width: 100%;\r\n}*/\r\n\r\n/* Multiselect multiple mode should expand properly */\r\n.multiselect.no-border.multiselect--multiple {\r\n  min-height: auto !important;\r\n  height: auto !important;\r\n  padding-top: 6px;\r\n  padding-bottom: 6px;\r\n}\r\n\r\n/* Make tags wrap properly and avoid overlapping */\r\n.multiselect--multiple .multiselect__tags {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  min-height: 40px;\r\n  padding: 4px 8px;\r\n  gap: 4px;\r\n}\r\n\r\n/* Ratakan isi Multiselect ke tengah */\r\n.multiselect .multiselect__single,\r\n.multiselect .multiselect__tags {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100%;\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* Hilangkan padding tambahan di wrapper */\r\n.multiselect.no-border {\r\n  padding-top: 0 !important;\r\n  padding-bottom: 0 !important;\r\n}\r\n</style>"],"names":["userData","useUserStore","props","__props","emit","__emit","formData","ref","modelValue","dropdownData","dropdownsLoaded","onMounted","async","fetchPromises","Object","entries","urls","dropdowns","map","key","dropdown","response","axios","get","url","value","data","item","label","error","Promise","all","fetchDropdowns","watch","val","updateField","fields","columns","forEach","field","autofill","triggeredBy","res","API_BASE_URL","params","filledValue","getValue","column","err","isUneditable","col","_a","uneditable","includes","isType","type","submitForm","payload","toRemove","_b","exclude","compute","visibleIf","isRequired","required","isEmpty","trim","Array","isArray","length","alert","v","join","username","post","window","location","reload","visibleColumns","computed","filter","previouslyVisible","newVisible","currentlyVisible","immediate"],"mappings":"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"}