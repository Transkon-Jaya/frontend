{"version":3,"file":"TestView-Hn7_AcUg.js","sources":["../../src/utils/fetchApi.js","../../src/views/TestView.vue"],"sourcesContent":["// src/utils/fetchApi.js\r\n\r\nexport async function fetchApi(endpoint, method = 'GET', body = null, headers = {}) {\r\n  const url = \"https://www.transkon-rent.com\" + endpoint;\r\n\r\n  const options = {\r\n    method,\r\n    headers: { ...headers },\r\n  };\r\n\r\n  if (body) {\r\n    if (body instanceof FormData) {\r\n      options.body = body;\r\n      // Do not set Content-Type; browser sets it automatically for FormData\r\n    } else if (typeof body === 'object') {\r\n      options.headers['Content-Type'] = 'application/json';\r\n      options.body = JSON.stringify(body);\r\n    } else {\r\n      // fallback for raw strings or other types\r\n      options.body = body;\r\n    }\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(url, options);\r\n    const contentType = response.headers.get('content-type');\r\n\r\n    if (contentType && contentType.includes('application/json')) {\r\n      return await response.json();\r\n    } else {\r\n      const text = await response.text();\r\n      return { status: 'success', message: text };\r\n    }\r\n  } catch (error) {\r\n    return { status: 'error', message: error.message };\r\n  }\r\n}\r\n","<script setup>\r\nimport { ref, computed, onMounted, onBeforeUnmount } from \"vue\";\r\nimport axios from \"axios\";\r\nimport { VueGoodTable } from \"vue-good-table-next\";\r\nimport \"vue-good-table-next/dist/vue-good-table-next.css\";\r\nimport Multiselect from \"vue-multiselect\";\r\nimport \"vue-multiselect/dist/vue-multiselect.css\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { fetchApi } from '@/utils/fetchApi.js';\r\n\r\nconst apiUrl = \"https://www.transkon-rent.com/api/marketing\";\r\nconst customerUrl = \"https://www.transkon-rent.com/api/customer\";\r\nconst locationUrl = \"https://www.transkon-rent.com/api/location\";\r\nconst marketingData = ref([]);\r\nconst marketingDataInsert = ref([]);\r\nconst customers = ref([]);\r\nconst locations = ref([]);\r\nconst filteredData = ref([]); // Store filtered data\r\nconst columns = ref([]);\r\nconst loading = ref(true);\r\nconst error = ref(null);\r\nconst firstColumnWidth = ref(\"150px\");\r\nconst secondColumnWidth = ref(\"100px\");\r\nconst changedRows = ref(new Map()); // Store changed rows\r\nconst changedRowsInsert = ref(new Map());\r\nconst checkboxFields = [\r\n  \"front_bumper\",\r\n  \"rear_bumper\",\r\n  \"roll_bar\",\r\n  \"rops\",\r\n  \"buggy_whip_cw_flag\",\r\n  \"body_strip_3m\",\r\n  \"foglamp_led_16_mata\",\r\n  \"rotary_lamp_led\",\r\n  \"rotary_lamp_flash_tube\",\r\n  \"lamp_comb_led\",\r\n  \"safety_cone\",\r\n  \"wheel_chock\",\r\n  \"fire_exting\",\r\n  \"radio_motorolla\",\r\n  \"gps\",\r\n  \"wheel_nut_indic\",\r\n  \"tyre_gt_265_65_r17_mt\",\r\n  \"radio_icom\",\r\n];\r\nconst fieldsToRemove = [\"isEditing\", \"filterable\", \"vgt_id\", \"originalIndex\"];\r\nconst dateFields = [\r\n  \"inquiry\",\r\n  \"date_rfq\",\r\n  \"date_deadline_tender\",\r\n  \"approval_presdir\",\r\n  \"date_Quotation_trja\",\r\n  \"date_send_quot\",\r\n  \"date_approved_quot\",\r\n  \"date_spk_po_customer\",\r\n  \"date_master_contract\",\r\n  \"date_po_dealer\",\r\n  \"date_send_po\",\r\n  \"date_delvery_to_customer\",\r\n  \"received_date_by_customer\",\r\n  \"date_commisioning_finish\",\r\n];\r\n\r\nconst fetchCustomerData = async () => {\r\n  try {\r\n    const response = await axios.get(customerUrl);\r\n    console.log(typeof response.data);\r\n    console.log(response.data);\r\n    if (Array.isArray(response.data)) {\r\n      customers.value = response.data.map((item) => item.name ?? \"\"); // Handle missing values\r\n    } else {\r\n      console.error(\"Unexpected API response format:\", response.data);\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Failed to fetch customer data:\", err);\r\n  }\r\n}\r\n\r\nconst fetchLocationData = async () => {\r\n  try {\r\n    const response = await axios.get(locationUrl);\r\n    if (Array.isArray(response.data)) {\r\n      locations.value = response.data.map((item) => item.location ?? \"\"); // Handle missing values\r\n    } else {\r\n      console.error(\"Unexpected API response format:\", response.data);\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Failed to fetch customer data:\", err);\r\n  }\r\n}\r\n\r\nconst fetchMarketingData = async () => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await axios.get(apiUrl);\r\n    if (response.data.length > 0) {\r\n      columns.value = [\r\n        {\r\n          label: \"ID\",\r\n          field: \"id\",\r\n          // width: secondColumnWidth.value,\r\n          width: \"80px\", // Kurangi ukuran kolom ID\r\n          minWidth: \"100px\",\r\n          sortable: true,\r\n          filterable: false,\r\n          editable: false,\r\n          frozen: true,\r\n          headerClass: \"custom-header\",\r\n        },\r\n        ...Object.keys(response.data[0])\r\n          .filter((key) => key !== \"id\")\r\n          .map((key) => ({\r\n            label: key.replace(/_/g, \" \").toUpperCase(),\r\n            field: key,\r\n            sortable: true,\r\n            filterable: true,\r\n            filterOptions: { enabled: true, placeholder: `${key}` },\r\n            editable: true,\r\n            type: checkboxFields.includes(key) ? \"checkbox\" : \"text\",\r\n            width:\r\n              Math.max(\r\n                ...response.data.map((item) => String(item[key]).length),\r\n                key.length\r\n              ) *\r\n                10 +\r\n              20 +\r\n              \"px\",\r\n            minWidth: \"80px\",\r\n            headerClass: \"custome-header\",\r\n          })),\r\n      ];\r\n    }\r\n\r\n    marketingData.value = response.data.map((item) => ({\r\n      ...item,\r\n      filterable: true,\r\n    }));\r\n\r\n    filteredData.value = [...marketingData.value]; // Initialize filtered data\r\n\r\n    setTimeout(updateColumnWidths, 500);\r\n  } catch (err) {\r\n    error.value = \"Failed to fetch data\";\r\n    console.error(err);\r\n  } finally {\r\n    loading.value = false;\r\n    addNewRow();\r\n  }\r\n};\r\n\r\nconst addNewRow = () => {\r\n  const newRow = {};\r\n  columns.value.forEach((col) => {\r\n    newRow[col.field] = checkboxFields.includes(col.field) ? 0 : \"\";\r\n  });\r\n  newRow.id = marketingDataInsert.value.length + 1;\r\n  marketingDataInsert.value.push(newRow);\r\n};\r\n\r\n// Track changes\r\nconst trackUpload = (row, field) => {\r\n  if (!changedRowsInsert.value.has(row.id)) {\r\n    changedRowsInsert.value.set(row.id, { ...row });\r\n  } else {\r\n    changedRowsInsert.value.get(row.id)[field] = row[field];\r\n  }\r\n};\r\n\r\nconst upload = async () => {\r\n  try {\r\n    console.log(\"button upload\");\r\n    const uploads = Array.from(changedRowsInsert.value.values());\r\n    console.log(uploads);\r\n    for (const item of uploads) {\r\n      const uploadItem = { ...item };\r\n      for (const prop of fieldsToRemove) {\r\n        delete uploadItem[prop];\r\n      }\r\n      delete uploadItem[\"id\"];\r\n      console.log(uploadItem);\r\n      dateFields.forEach((key) => {\r\n        if (\r\n          uploadItem[key] !== null &&\r\n          uploadItem[key] !== undefined &&\r\n          !isNaN(Date.parse(uploadItem[key]))\r\n        ) {\r\n          uploadItem[key] = new Date(uploadItem[key])\r\n            .toISOString()\r\n            .split(\"T\")[0]; // Format: YYYY-MM-DD\r\n        }\r\n      });\r\n      Object.keys(uploadItem).forEach((key) => {\r\n        if (uploadItem[key] === \"\") {\r\n          uploadItem[key] = null;\r\n        }\r\n      });\r\n      await axios.post(`${apiUrl}`, uploadItem);\r\n      await fetchMarketingData();\r\n      alert(\"Data uploaded Successfully\");\r\n      marketingDataInsert.value = [];\r\n      changedRowsInsert.value.clear();\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Failed to upload: \", err);\r\n    alert(\"Failed to upload\");\r\n  }\r\n};\r\n\r\n// For updates\r\nconst trackChanges = (row, field) => {\r\n  if (!changedRows.value.has(row.id)) {\r\n    changedRows.value.set(row.id, { ...row });\r\n  } else {\r\n    changedRows.value.get(row.id)[field] = row[field];\r\n  }\r\n};\r\n// Save all changes (updates)\r\nconst saveChanges = async () => {\r\n  try {\r\n    const updates = Array.from(changedRows.value.values());\r\n    for (const item of updates) {\r\n      const updatedItem = { ...item };\r\n      for (const prop of fieldsToRemove) {\r\n        delete updatedItem[prop];\r\n      }\r\n      dateFields.forEach((key) => {\r\n        if (\r\n          updatedItem[key] !== null &&\r\n          updatedItem[key] !== undefined &&\r\n          !isNaN(Date.parse(updatedItem[key]))\r\n        ) {\r\n          updatedItem[key] = new Date(updatedItem[key])\r\n            .toISOString()\r\n            .split(\"T\")[0]; // Format: YYYY-MM-DD\r\n        }\r\n      });\r\n      await axios.put(`${apiUrl}`, updatedItem);\r\n    }\r\n    alert(\"Changes saved successfully!\");\r\n    changedRows.value.clear();\r\n  } catch (err) {\r\n    console.error(\"Failed to save changes:\", err);\r\n    alert(\"Failed to save changes\");\r\n  }\r\n};\r\n\r\n// Export to Excel (filtered data only)\r\nconst exportToExcel = () => {\r\n  \r\n  const worksheet = XLSX.utils.json_to_sheet(filteredData.value);\r\n  const workbook = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(workbook, worksheet, \"Marketing Data\");\r\n  XLSX.writeFile(workbook, \"Filtered_Marketing_Data.xlsx\");\r\n};\r\n\r\n// Update filtered data when table is filtered\r\nconst onTableFiltered = (filteredRows) => {\r\n  filteredData.value = filteredRows;\r\n  console.log(\"F Len : \", filteredData.value.length, \" | M Len : \", marketingData.value.length);\r\n};\r\n\r\n// Dynamic Column Width Calculation\r\nconst updateColumnWidths = () => {\r\n  const secondCol = document.querySelector(\".vue-good-table th:nth-child(1)\");\r\n  if (secondCol) secondColumnWidth.value = secondCol.offsetWidth + \"px\";\r\n  document.documentElement.style.setProperty(\r\n    \"--second-column-width\",\r\n    secondColumnWidth.value\r\n  );\r\n};\r\n\r\nonMounted(() => {\r\n  fetchMarketingData();\r\n  fetchCustomerData();\r\n  fetchLocationData();\r\n  window.addEventListener(\"resize\", updateColumnWidths);\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  window.removeEventListener(\"resize\", updateColumnWidths);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <h2>Marketing</h2>\r\n    <button @click=\"upload\">Upload</button>\r\n    <button @click=\"addNewRow\">Add New Row</button>\r\n    <p v-if=\"loading\">Loading...</p>\r\n    <p v-if=\"error\" class=\"error\">{{ error }}</p>\r\n    <!-- INSERT TABLE -->\r\n    <div class=\"table-container\">\r\n      <vue-good-table\r\n        v-if=\"!loading && !error\"\r\n        :columns=\"columns\"\r\n        :rows=\"marketingDataInsert\"\r\n        :pagination-options=\"{ enabled: false }\"\r\n        style=\"overflow-x: auto\"\r\n      >\r\n        <template v-slot:table-row=\"props\">\r\n          <template v-if=\"checkboxFields.includes(props.column.field)\">\r\n            <div class=\"checkbox-container\">\r\n              <input\r\n                type=\"checkbox\"\r\n                :checked=\"props.row[props.column.field] == 1\"\r\n                @change=\"\r\n                  (event) => {\r\n                    props.row[props.column.field] = event.target.checked\r\n                      ? 1\r\n                      : 0;\r\n                    trackUpload(props.row, props.column.field);\r\n                  }\r\n                \"\r\n              />\r\n            </div>\r\n          </template>\r\n          <template v-else-if=\"props.column.field === 'name_customer'\">\r\n            <Multiselect\r\n              v-model=\"props.row[props.column.field]\"\r\n              :options=\"customers || []\"\r\n              :searchable=\"true\"\r\n              :allow-empty=\"false\"\r\n              placeholder=\"Select customer...\"\r\n              noResultsText=\"No matching customers found\"\r\n              @update:modelValue=\"trackUpload(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"props.column.field === 'location'\">\r\n            <Multiselect\r\n              v-model=\"props.row[props.column.field]\"\r\n              :options=\"locations || []\"\r\n              :searchable=\"true\"\r\n              :allow-empty=\"false\"\r\n              placeholder=\"Select location...\"\r\n              noResultsText=\"No matching customers found\"\r\n              @update:modelValue=\"trackUpload(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"dateFields.includes(props.column.field)\">\r\n            <input\r\n              type=\"date\"\r\n              v-model=\"props.row[props.column.field]\"\r\n              @input=\"trackUpload(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"props.column.editable !== false\">\r\n            <input\r\n              v-model=\"props.row[props.column.field]\"\r\n              @input=\"trackUpload(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else>\r\n            <span>{{ props.row[props.column.field] }}</span>\r\n          </template>\r\n        </template>\r\n      </vue-good-table>\r\n    </div>\r\n\r\n    <button @click=\"exportToExcel\">Export to Excel</button>\r\n    <button @click=\"saveChanges\">Save Updates</button>\r\n    <!-- UPDATE TABLE -->\r\n    <div class=\"table-container\">\r\n      <vue-good-table\r\n        v-if=\"!loading && !error\"\r\n        :columns=\"columns\"\r\n        :rows=\"marketingData\"\r\n        :pagination-options=\"{ enabled: true, mode: 'pages', perPage: 10 }\"\r\n        :search-options=\"{ enabled: true }\"\r\n        :sort-options=\"{ enabled: true }\"\r\n        style=\"overflow-x: auto\"\r\n        @on-filtered=\"onTableFiltered\"\r\n      >\r\n        <template v-slot:table-row=\"props\">\r\n          <template v-if=\"checkboxFields.includes(props.column.field)\">\r\n            <div class=\"checkbox-container\">\r\n              <input\r\n                type=\"checkbox\"\r\n                :checked=\"props.row[props.column.field] == 1\"\r\n                @change=\"\r\n                  props.row[props.column.field] = $event.target.checked ? 1 : 0\r\n                \"\r\n              />\r\n            </div>\r\n          </template>\r\n          <template v-else-if=\"props.column.field === 'name_customer'\">\r\n            <Multiselect\r\n              v-model=\"props.row[props.column.field]\"\r\n              :options=\"customers || []\"\r\n              :searchable=\"true\"\r\n              :allow-empty=\"false\"\r\n              placeholder=\"Select customer...\"\r\n              noResultsText=\"No matching customers found\"\r\n              @update:modelValue=\"trackChanges(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"props.column.field === 'location'\">\r\n            <Multiselect\r\n              v-model=\"props.row[props.column.field]\"\r\n              :options=\"locations || []\"\r\n              :searchable=\"true\"\r\n              :allow-empty=\"true\"\r\n              placeholder=\"Select location...\"\r\n              noResultsText=\"No matching customers found\"\r\n              @update:modelValue=\"trackChanges(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"dateFields.includes(props.column.field)\">\r\n            <input\r\n              type=\"date\"\r\n              v-model=\"props.row[props.column.field]\"\r\n              @input=\"trackChanges(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n\r\n          <template v-else-if=\"props.column.editable !== false\">\r\n            <input\r\n              v-model=\"props.row[props.column.field]\"\r\n              @input=\"trackChanges(props.row, props.column.field)\"\r\n            />\r\n          </template>\r\n          <template v-else>\r\n            <span>{{ props.row[props.column.field] }}</span>\r\n          </template>\r\n        </template>\r\n      </vue-good-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n/* .table-container {\r\n  width: 100%;\r\n  overflow-x: auto;\r\n  max-width: 100%;\r\n  position: relative;\r\n  margin-top: \"200px\";\r\n  height: 100%;\r\n  padding: 0px 0px;\r\n} */\r\n\r\n.vgt-table th { /* table header */\r\n  padding: 0.5px 5px;\r\n  font-size: 13px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  color: #333;\r\n}\r\n\r\ntable.vgt-table td {/* table row / cell */\r\n  padding: 0.5px 5px;\r\n}\r\n\r\n.checkbox-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 75%;\r\n  padding: 1px;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n}\r\ninput {\r\n  padding: 0px 0px;\r\n  font-size: 12px; /* font size */\r\n  width: 100%;\r\n  margin: 0px 0px;\r\n  border: none !important;\r\n  outline: none !important;\r\n  height: 100%;\r\n}\r\n\r\n.vgt-wrap__footer .footer__row-count__label,\r\n.vgt-wrap__footer .footer__row-count__select,\r\n.vgt-wrap__footer .footer__navigation__page-btn span,\r\n.vgt-wrap__footer .footer__navigation__page-info span {\r\n    font-size: 12px;\r\n}\r\n\r\n.multiselect__content-wrapper {\r\n  position:absolute !important;\r\n  z-index: 9999 !important;\r\n  min-height: 100px !important;\r\n  max-height: 100px !important;\r\n  overflow-y: auto !important;\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\nbutton {\r\n  padding: 3px 8px;\r\n  margin: 5px;\r\n  background-color: #28a745;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 0.25rem;\r\n}\r\nbutton:hover {\r\n  background-color: #218838;\r\n}\r\n</style>\r\n"],"names":["_0x5e8d","_0x187df2","_0x237381","_0x1b112d","_0x1b11","_0x5e8d4d","_0x21e883","_0x1b9ed7","_0x22fbbf","_0x33633a","parseInt","_0x5a38fb","apiUrl","marketingData","ref","marketingDataInsert","customers","locations","filteredData","columns","loading","error","secondColumnWidth","changedRows","Map","changedRowsInsert","checkboxFields","fieldsToRemove","dateFields","fetchMarketingData","async","value","response","axios","get","data","length","label","field","width","minWidth","sortable","filterable","editable","frozen","headerClass","Object","keys","filter","key","map","replace","toUpperCase","filterOptions","enabled","placeholder","type","includes","Math","max","item","String","setTimeout","updateColumnWidths","err","addNewRow","newRow","forEach","col","id","push","trackUpload","row","has","set","upload","uploads","Array","from","values","uploadItem","prop","isNaN","Date","parse","toISOString","split","post","alert","clear","trackChanges","saveChanges","updates","updatedItem","put","exportToExcel","worksheet","XLSX.utils","json_to_sheet","workbook","book_new","utils","book_append_sheet","XLSX.writeFile","onTableFiltered","filteredRows","secondCol","document","querySelector","offsetWidth","documentElement","style","setProperty","onMounted","isArray","name","location","window","addEventListener","onBeforeUnmount","removeEventListener"],"mappings":"gLAEA,SAAAA,EAAAC,EAAAC,GAAA,MAAAC,EAAAC,IAAA,OAAAJ,EAAA,SAAAK,EAAAC,GAAA,OAAAH,EAAAE,GAAA,IAAA,GAAAJ,EAAAC,EAAA,CAAA,SAAAE,IAAA,MAAAG,EAAA,CAAA,gCAAA,aAAA,eAAA,cAAA,gBAAA,UAAA,gBAAA,gBAAA,UAAA,UAAA,OAAA,OAAA,WAAA,eAAA,mBAAA,MAAA,OAAA,eAAA,YAAA,cAAA,OAAAH,EAAA,WAAA,OAAAG,CAAA,IAAA,EAAA,WAAA,MAAAC,EAAAR,EAAAS,EAAAL,IAAA,OAAA,IAAA,GAAA,SAAAM,SAAAF,EAAA,MAAA,GAAAE,SAAAF,EAAA,MAAA,IAAAE,SAAAF,EAAA,MAAA,IAAAE,SAAAF,EAAA,MAAA,GAAAE,SAAAF,EAAA,MAAA,GAAAE,SAAAF,EAAA,MAAA,EAAAE,SAAAF,EAAA,MAAA,EAAAE,SAAAF,EAAA,MAAA,GAAAE,SAAAF,EAAA,MAAA,GAAA,QAAA,KAAAC,EAAA,QAAA,OAAAE,GAAAF,EAAA,KAAAA,EAAA,QAAA,CAAA,CAAA,mYCQMG,EAAS,4EAGT,MAAAC,EAAgBC,EAAI,IACpBC,EAAsBD,EAAI,IAC1BE,EAAYF,EAAI,IAChBG,EAAYH,EAAI,IAChBI,EAAeJ,EAAI,IACnBK,EAAUL,EAAI,IACdM,EAAUN,GAAI,GACdO,EAAQP,EAAI,MACOA,EAAI,SACvB,MAAAQ,EAAoBR,EAAI,SACxBS,EAAcT,EAAQ,IAAAU,KACtBC,EAAoBX,EAAQ,IAAAU,KAC5BE,EAAiB,CACrB,eACA,cACA,WACA,OACA,qBACA,gBACA,sBACA,kBACA,yBACA,gBACA,cACA,cACA,cACA,kBACA,MACA,kBACA,wBACA,cAEIC,EAAiB,CAAC,YAAa,aAAc,SAAU,iBACvDC,EAAa,CACjB,UACA,WACA,uBACA,mBACA,sBACA,iBACA,qBACA,uBACA,uBACA,iBACA,eACA,2BACA,4BACA,4BA+BIC,EAAqBC,UACrB,IACFV,EAAQW,OAAQ,EAChB,MAAMC,QAAiBC,EAAMC,IAAItB,GAC7BoB,EAASG,KAAKC,OAAS,IACzBjB,EAAQY,MAAQ,CACd,CACEM,MAAO,KACPC,MAAO,KAEPC,MAAO,OACPC,SAAU,QACVC,UAAU,EACVC,YAAY,EACZC,UAAU,EACVC,QAAQ,EACRC,YAAa,oBAEZC,OAAOC,KAAKf,EAASG,KAAK,IAC1Ba,QAAQC,GAAgB,OAARA,IAChBC,KAAKD,IAAS,CACbZ,MAAOY,EAAIE,QAAQ,KAAM,KAAKC,cAC9Bd,MAAOW,EACPR,UAAU,EACVC,YAAY,EACZW,cAAe,CAAEC,SAAS,EAAMC,YAAa,GAAGN,KAChDN,UAAU,EACVa,KAAM9B,EAAe+B,SAASR,GAAO,WAAa,OAClDV,MAKI,GAJFmB,KAAKC,OACA3B,EAASG,KAAKe,KAAKU,GAASC,OAAOD,EAAKX,IAAMb,SACjDa,EAAIb,QAGN,GACA,KACFI,SAAU,OACVK,YAAa,uBAKrBhC,EAAckB,MAAQC,EAASG,KAAKe,KAAKU,IAAU,IAC9CA,EACHlB,YAAY,MAGdxB,EAAaa,MAAQ,IAAIlB,EAAckB,OAEvC+B,WAAWC,GAAoB,IAChC,OAAQC,GACP3C,EAAMU,MAAQ,sBAElB,CAAY,QACRX,EAAQW,OAAQ,KAEjB,GAGGkC,EAAY,KAChB,MAAMC,EAAS,CAAA,EACP/C,EAAAY,MAAMoC,SAASC,IACdF,EAAAE,EAAI9B,OAASZ,EAAe+B,SAASW,EAAI9B,OAAS,EAAI,EAAA,IAExD4B,EAAAG,GAAKtD,EAAoBgB,MAAMK,OAAS,EAC3BrB,EAAAgB,MAAMuC,KAAKJ,EAAM,EAIjCK,EAAc,CAACC,EAAKlC,KACnBb,EAAkBM,MAAM0C,IAAID,EAAIH,IAGjB5C,EAAAM,MAAMG,IAAIsC,EAAIH,IAAI/B,GAASkC,EAAIlC,GAFjDb,EAAkBM,MAAM2C,IAAIF,EAAIH,GAAI,IAAKG,GAG1C,EAGGG,EAAS7C,UACT,IAEF,MAAM8C,EAAUC,MAAMC,KAAKrD,EAAkBM,MAAMgD,UAEnD,IAAA,MAAWnB,KAAQgB,EAAS,CACpB,MAAAI,EAAa,IAAKpB,GACxB,IAAA,MAAWqB,KAAQtD,SACVqD,EAAWC,UAEbD,EAAe,GAEXpD,EAAAuC,SAASlB,IAEI,OAApB+B,EAAW/B,SACS,IAApB+B,EAAW/B,IACViC,MAAMC,KAAKC,MAAMJ,EAAW/B,OAE7B+B,EAAW/B,GAAO,IAAIkC,KAAKH,EAAW/B,IACnCoC,cACAC,MAAM,KAAK,GACf,IAEHxC,OAAOC,KAAKiC,GAAYb,SAASlB,IACP,KAApB+B,EAAW/B,KACb+B,EAAW/B,GAAO,KACnB,UAEGhB,EAAMsD,KAAK,GAAG3E,IAAUoE,SACxBnD,IACN2D,MAAM,8BACNzE,EAAoBgB,MAAQ,GAC5BN,EAAkBM,MAAM0D,OACzB,CACF,OAAQzB,GAEPwB,MAAM,mBACP,GAIGE,EAAe,CAAClB,EAAKlC,KACpBf,EAAYQ,MAAM0C,IAAID,EAAIH,IAGjB9C,EAAAQ,MAAMG,IAAIsC,EAAIH,IAAI/B,GAASkC,EAAIlC,GAF3Cf,EAAYQ,MAAM2C,IAAIF,EAAIH,GAAI,IAAKG,GAGpC,EAGGmB,EAAc7D,UACd,IACF,MAAM8D,EAAUf,MAAMC,KAAKvD,EAAYQ,MAAMgD,UAC7C,IAAA,MAAWnB,KAAQgC,EAAS,CACpB,MAAAC,EAAc,IAAKjC,GACzB,IAAA,MAAWqB,KAAQtD,SACVkE,EAAYZ,GAEVrD,EAAAuC,SAASlB,IAEK,OAArB4C,EAAY5C,SACS,IAArB4C,EAAY5C,IACXiC,MAAMC,KAAKC,MAAMS,EAAY5C,OAE9B4C,EAAY5C,GAAO,IAAIkC,KAAKU,EAAY5C,IACrCoC,cACAC,MAAM,KAAK,GACf,UAEGrD,EAAM6D,IAAI,GAAGlF,IAAUiF,EAC9B,CACDL,MAAM,+BACNjE,EAAYQ,MAAM0D,OACnB,OAAQzB,GAEPwB,MAAM,yBACP,GAIGO,GAAgB,KAEpB,MAAMC,EAAYC,EAAWC,cAAchF,EAAaa,OAClDoE,EAAWF,EAAWG,WACjBC,EAAAC,kBAAkBH,EAAUH,EAAW,kBAClDO,EAAeJ,EAAU,+BAA8B,EAInDK,GAAmBC,IACvBvF,EAAaa,MAAQ0E,CACuE,EAIxF1C,GAAqB,KACnB,MAAA2C,EAAYC,SAASC,cAAc,mCACrCF,IAAWpF,EAAkBS,MAAQ2E,EAAUG,YAAc,MACjEF,SAASG,gBAAgBC,MAAMC,YAC7B,wBACA1F,EAAkBS,MACtB,SAGAkF,GAAU,SAhNgBnF,WACpB,IACF,MAAME,QAAiBC,EAAMC,IAtDb,8CAyDZ2C,MAAMqC,QAAQlF,EAASG,QACfnB,EAAAe,MAAQC,EAASG,KAAKe,KAAKU,GAASA,EAAKuD,MAAQ,KAI9D,OAAQnD,GAER,MAGuBlC,WACpB,IACF,MAAME,QAAiBC,EAAMC,IApEb,8CAqEZ2C,MAAMqC,QAAQlF,EAASG,QACflB,EAAAc,MAAQC,EAASG,KAAKe,KAAKU,GAASA,EAAKwD,UAAY,KAIlE,OAAQpD,GAER,MA2LMqD,OAAAC,iBAAiB,SAAUvD,GAAkB,IAGtDwD,GAAgB,KACPF,OAAAG,oBAAoB,SAAUzD,GAAkB"}